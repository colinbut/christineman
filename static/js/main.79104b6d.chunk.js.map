{"version":3,"sources":["state/DataContext.js","state/MyProvider.js","components/utils/ScrollToTop.js","components/Footer.js","components/Projects.js","components/About.js","components/ui/SubmitButton.js","components/ContactForm.js","components/Contact.js","components/ui/NextArrow.js","components/ui/NextButton.js","components/ui/PreviousArrow.js","components/ui/PreviousButton.js","components/Project.js","components/AppWrapper.js","components/NavigationBar.js","serviceWorker.js","index.js","App.js"],"names":["DataContext","React","createContext","data","MyProvider","Provider","value","this","props","children","Component","ScrollToTop","prevProps","location","window","scrollTo","top","left","behavior","withRouter","Footer","context","useContext","className","copyright","text","useStyles","makeStyles","root","fontSize","textAlign","media","minHeight","Description","projects","description","to","Projects","classes","url","useRouteMatch","projectList","map","item","key","Grid","xs","project_url","Card","square","style","boxShadow","CardActionArea","CardMedia","image","process","gallery","title","link_title","CardContent","container","spacing","About","about","heading","subHeading","summary","services","clients","SubmitButton","buttonText","submitForm","type","onClick","schema","Yup","firstName","required","lastName","email","message","console","log","ContactFormWrapper","useState","validated","validationSchema","onSubmit","initialValues","handleSubmit","handleChange","handleBlur","values","touched","errors","isValid","Form","noValidate","Row","Group","as","Col","md","controlId","Label","Control","name","onBlur","onChange","isInvalid","rows","Contact","ContactForm","Follow","href","contact","socialmedia","linkedin","NextArrow","icon","faChevronRight","size","NextButton","PreviousArrow","faChevronLeft","PreviousButton","ProjectGallery","images","src","ProjectNavigation","clickedProjectId","numberOfProjects","length","previousProjectId","nextProjectId","previousProject","nextProject","id","Project","projectLink","substring","lastIndexOf","projectClicked","projectIndex","project","projectNavData","parseInt","closing_note","AppWrapper","stickyRef","ref","path","component","exact","SiteHeader","homepage","site_title","NavMenu","activeClassName","NavigationBar","sticky","justify","Boolean","hostname","match","ReactDOM","render","useEffect","removeEventListener","handleScroll","isSticky","setSticky","useRef","pageYOffset","addEventListener","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.79104b6d.chunk.js","sourcesContent":["import React from 'react'\nimport data from '../config/static.json'\n\nconst DataContext = React.createContext(data)\n\nexport default DataContext","import React from 'react'\nimport DataContext from './DataContext'\nimport data from '../config/static.json'\n\nclass MyProvider extends React.Component {\n    render() {\n        return (\n            <DataContext.Provider value={data}>\n                {this.props.children}\n            </DataContext.Provider>\n        )\n    }\n}\n\nexport default MyProvider","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nclass ScrollToTop extends React.Component {\n    componentDidUpdate(prevProps) {\n        if (this.props.location !== prevProps.location) {\n            window.scrollTo({top: 0, left: 0, behavior: \"smooth\"})\n        }\n    }\n\n    render() {\n        return this.props.children\n    }\n}\n\nexport default withRouter(ScrollToTop)\n","import React, {useContext} from 'react'\nimport '../css/index.css';\nimport DataContext from '../state/DataContext'\n\nexport default function Footer() {\n    const context = useContext(DataContext)\n    return (\n        <footer className=\"footer\">\n            <strong>Copyright</strong>\n            <p>&copy; {context.copyright.text}</p>\n        </footer>\n    )\n}","import React, { useContext } from 'react'\nimport '../css/index.css';\nimport { Link, useRouteMatch } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport CardContent from '@material-ui/core/CardContent'\nimport Footer from '../components/Footer'\nimport { NavLink } from 'react-router-dom'\nimport DataContext from '../state/DataContext'\n\nconst useStyles = makeStyles({\n    root: {\n        fontSize: '21px',\n        textAlign: 'left'\n    },\n    media: {\n        // height: 354.38\n        minHeight: 500.38\n    }\n})\n\nconst Projects = () => {\n    const context = useContext(DataContext)\n    const classes = useStyles();\n    let { url } = useRouteMatch();\n    const projectList = context.projects.projectList\n    const projects = projectList.map((item, key) => \n        <Grid item xs={6}>\n            <Link className=\"anchor-item-link\" to={`${url}/${item.project_url}`}>\n                <Card square={true} style={{boxShadow: \"none\"}}>\n                    <CardActionArea>\n                        <CardMedia className={classes.media} \n                            image={process.env.PUBLIC_URL + '/img/' + item.gallery[0]} \n                            title={item.link_title}/>\n                        <CardContent className={classes.root}>\n                            { item.link_title }\n                        </CardContent>\n                    </CardActionArea>\n                </Card>\n            </Link>\n        </Grid>\n    );\n\n    return (\n        <div>\n            <Grid container spacing={10}>\n                { projects }\n            </Grid>\n            <Description data={context.projects} />\n            <Footer />\n        </div>\n    )\n}\n\nconst Description = (props) => {\n    const projects = props.data\n    return (\n        <div>\n            <h3 className=\"description\">{projects.description}</h3>\n            <div className=\"link\">\n                <NavLink to=\"/contact\" className=\"anchor-item-link\">\n                    <p className=\"description-link\">Let's work together.</p>\n                </NavLink>\n            </div>\n        </div>\n    )\n}\n\nexport default Projects","import React from 'react'\nimport '../css/index.css';\nimport Footer from './Footer'\nimport Grid from '@material-ui/core/Grid'\nimport DataContext from '../state/DataContext'\n\nconst About = () => {\n    const context = React.useContext(DataContext)\n    const about = context.about\n    return (\n        <div className=\"about-page-container-wrapper\">\n            <h1>{about.heading}</h1>\n            <p className=\"text-spacing vertical-spacing\"><em>{about.subHeading}</em></p>\n            <p className=\"text-spacing vertical-spacing\">{about.summary}</p>\n            <Grid container spacing={5}>\n                <Grid item xs={6}>\n                    <h2>Services</h2>\n                    <p className=\"text-spacing\">{about.services}</p>\n                </Grid>\n                <Grid item xs={6}>\n                    <h2>Clients</h2>\n                    <p className=\"text-spacing\">{about.clients}</p>\n                </Grid>\n            </Grid>\n            <div className=\"additional-description\"></div>\n            <Footer />\n        </div>\n    )\n}\n\nexport default About","import React from 'react'\n\nconst SubmitButton = (props) => {\n    let buttonText = props.buttonText\n    let submitForm = props.submitForm\n    return (\n        <button type=\"submit\" className=\"submit-button\" onClick={submitForm}>\n            { buttonText }\n        </button>\n    )\n}\n\nexport default SubmitButton","import React, { Component, useState } from 'react'\nimport '../css/index.css';\nimport SubmitButton from './ui/SubmitButton'\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport { Formik } from 'formik'\nimport * as Yup from 'yup' \n\nconst schema = Yup.object({\n    firstName: Yup.string().required(),\n    lastName: Yup.string().required(),\n    email: Yup.string().email().required(),\n    message: Yup.string().required()\n})  \n\nconst submitForm = () => {\n    console.log(\"Submitting form\")\n}\n\nconst ContactFormWrapper = () => {\n    const [validated, setValidated] = useState(false)\n        return (\n            <div className=\"contact-page-container-wrapper\">\n                <h2 className=\"contact-form-heading\">\n                    if you have any work inquiry, or you would like to\n                    collaborate, please feel free to email me.\n                </h2>\n                <Formik validationSchema={schema} onSubmit={submitForm} \n                    initialValues={{\n                        firstName: 'First Name',\n                        lastName: 'Last Name',\n                        email: 'example@email.com'\n                    }}\n                > \n                {({\n                    handleSubmit,\n                    handleChange,\n                    handleBlur,\n                    values,\n                    touched,\n                    isValid,\n                    errors\n                }) => (\n                <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                    <Form.Row>\n                        <Form.Group as={Col} md=\"6\" controlId=\"firstName\">\n                            <Form.Label>First Name*</Form.Label>\n                            <Form.Control required \n                                name=\"firstName\" \n                                value={values.firstName || ''}\n                                onBlur={handleBlur} \n                                onChange={handleChange} \n                                isValid={touched.firstName && !errors.firstName} \n                                isInvalid={!!errors.firstName}\n                                type=\"text\" />\n                        </Form.Group>\n                    \n                        <Form.Group as={Col} md=\"6\" controlId=\"lastName\">\n                            <Form.Label>Last Name*</Form.Label>\n                            <Form.Control required \n                                name=\"lastName\" \n                                value={values.lastName} \n                                onBlur={handleBlur}\n                                onChange={handleChange} \n                                isValid={touched.lastName && !errors.lastName} \n                                isInvalid={!!errors.lastName}\n                                type=\"text\" />\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row>\n                        <Form.Group as={Col} md=\"12\" controlId=\"formGridEmail\">\n                            <Form.Label>Email*</Form.Label>\n                            <Form.Control \n                                required \n                                name=\"email\" \n                                value={values.email}\n                                onBlur={handleBlur} \n                                onChange={handleChange} \n                                isValid={touched.email && !errors.email} \n                                isInvalid={!!errors.email}\n                                type=\"email\"  />\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row>\n                        <Form.Group as={Col} md=\"12\" controlId=\"yourMessage.textArea\">\n                            <Form.Label>Your message*</Form.Label>\n                            <Form.Control as=\"textarea\" rows=\"8\" required />\n                        </Form.Group>\n                    </Form.Row>\n                    <SubmitButton buttonText=\"Submit\" submitForm={submitForm}/>\n                </Form>\n                )}\n                </Formik>\n            </div>\n        )\n}\n\nexport default ContactFormWrapper","import React from 'react'\nimport '../css/index.css';\nimport Footer from './Footer'\nimport ContactFormWrapper from './ContactForm'\nimport data from '../config/static.json'\n\nexport default function Contact() {\n    return (\n        <div>\n            <ContactFormWrapper/>\n            <Follow />\n            <Footer/>\n        </div>\n    )\n}\n\nconst Follow = () => {\n    return (\n        <div className=\"follow\">\n            <h1>Follow</h1>\n            <p><a className=\"follow-link\" href={data.contact.socialmedia.linkedin}>LinkedIn</a></p>\n        </div>\n    )\n}","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronRight } from '@fortawesome/free-solid-svg-icons'\n\nconst NextArrow = () => {\n    return (\n        <div className=\"right-icon\">\n            <FontAwesomeIcon icon={faChevronRight} size=\"2x\"/>\n        </div>\n    )\n}\n\nexport default NextArrow","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport '../../css/index.css'\nimport NextArrow from './NextArrow'\n\nconst NextButton = (props) => {\n    const { buttonText } = props\n    return (\n        <div className=\"arrow-button\">\n            <Grid container spacing={1}>\n                <Grid item xs={11}>\n                    <p className=\"right-button-text\">{ buttonText }</p>\n                </Grid>\n                <Grid item xs={1} className=\"project-nav-right-parent\">\n                    <NextArrow />\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default NextButton\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons'\nimport '../../css/index.css'\n\nconst PreviousArrow = () => {\n    return (\n        <div className=\"left-icon\">\n            <FontAwesomeIcon icon={faChevronLeft} size=\"2x\"/>\n        </div>\n    )\n}\n\nexport default PreviousArrow","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport '../../css/index.css'\nimport PreviousArrow from './PreviousArrow'\n\nconst PreviousButton = (props) => {\n    const { buttonText } = props\n    return (\n        <div className=\"arrow-button\">\n            <Grid container spacing={1}>\n                <Grid item xs={1} className=\"project-nav-left-parent\">\n                    <PreviousArrow />\n                </Grid>\n                <Grid item xs={11}>\n                    <p className=\"left-button-text\">{ buttonText }</p>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default PreviousButton\n","import React, { useContext } from 'react'\nimport '../css/index.css';\nimport Footer from './Footer'\nimport Grid from '@material-ui/core/Grid'\nimport NextButton from './ui/NextButton'\nimport PreviousButton from './ui/PreviousButton'\nimport DataContext from '../state/DataContext'\nimport { useRouteMatch, NavLink } from 'react-router-dom'\n\n\nconst Project = () => {\n    const context = useContext(DataContext)\n    let { url } = useRouteMatch();\n    let projectLink = url.substring(url.lastIndexOf('/') + 1)\n    let projects = context.projects.projectList\n    let projectClicked = {}\n\n    for (let projectIndex in projects) {\n        let project = projects[projectIndex]\n        if (project.project_url === projectLink) {\n            projectClicked = project\n        }\n    }\n\n    const projectNavData = {\n        projects: projects,\n        clickedProjectId: parseInt(projectClicked.id)\n    }\n    \n    return (\n        <div>\n            <h1 className=\"project-title\">{projectClicked.title}</h1>\n            <div className=\"project-summary\">\n                <p>{projectClicked.summary}</p>\n            </div>\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                <ProjectGallery images={projectClicked.gallery} />\n                </Grid>\n            </Grid>\n            <div className=\"closing-note\">\n                <p>{projectClicked.closing_note}</p>\n            </div>\n            <ProjectNavigation data={projectNavData} />\n            <Footer/>\n        </div>\n    )\n}\n\nconst ProjectGallery = (props) => {\n    return (\n        props.images.map((item, key) =>\n            <img className=\"project-gallery\" src={process.env.PUBLIC_URL + \"/img/\" + item} />\n        )\n    )\n}\n\n\nconst ProjectNavigation = (props) => {\n    let projects = props.data.projects\n    let clickedProjectId = props.data.clickedProjectId\n    let numberOfProjects = projects.length\n    let previousProjectId = clickedProjectId - 1 \n    let nextProjectId = clickedProjectId + 1\n\n    let previousProject = projects[previousProjectId - 1]\n    let nextProject = projects[nextProjectId - 1]\n\n    return (\n        <div id=\"project-catalog-nav\">\n            <Grid container spacing={1}>\n                <Grid item xs={6}>\n                    {previousProjectId !== 0 && \n                        <NavLink className=\"anchor-item-link\" to={`/projects/${previousProject.project_url}`}>\n                            <PreviousButton buttonText={previousProject.link_title} />\n                        </NavLink>\n                    }\n                </Grid>\n                <Grid item xs={6}>\n                    {nextProjectId <= numberOfProjects && \n                        <NavLink className=\"anchor-item-link\" to={`/projects/${nextProject.project_url}`}>\n                            <NextButton buttonText={nextProject.link_title} />\n                        </NavLink>\n                    }\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Project","import React from 'react'\nimport Projects from './Projects'\nimport About from './About'\nimport Contact from './Contact'\nimport Project from './Project'\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\n\nconst AppWrapper = ( { stickyRef } ) => {\n    return (\n        <main ref={stickyRef} className=\"container-custom\">\n            <Switch>\n                <Route path=\"/projects/:id\" component={Project}/>\n                <Route path=\"/projects\" component={Projects}/>\n                <Route path=\"/about\" component={About}/>\n                <Route path=\"/contact\" component={Contact}/>\n                <Route exact path=\"/\">\n                    <Redirect to=\"/projects\"/>\n                </Route>\n            </Switch>\n        </main>\n    )\n}\n\nexport default AppWrapper","import React, { useContext } from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport { NavLink } from 'react-router-dom'\nimport DataContext from '../state/DataContext'\n\nconst NavigationBar = ( { sticky } ) => {\n    return (\n        <nav id=\"announcement-header\" className={sticky ? \"announcement-header navbar-sticky\" : \"announcement-header\"}>\n            <Grid container spacing={10} justify=\"flex-end\">\n                <Grid item xs={9}>\n                    <SiteHeader />\n                </Grid>\n                <Grid item xs={3}>\n                    <NavMenu />\n                </Grid>\n            </Grid>\n        </nav>\n    )\n}\n\nconst SiteHeader = () => {\n    const context = useContext(DataContext)\n    return (\n        <div>\n            <NavLink to=\"/\" className=\"site-title anchor-item-link\">{context.homepage.site_title}</NavLink>\n        </div>\n    )\n}\n\nconst NavMenu = () => {\n    return (\n        <div className=\"nav\">\n            <Grid container spacing={1}>\n                <Grid item xs={4}>\n                    <NavLink to=\"/projects\" activeClassName=\"active\" className=\"anchor-item-link\">Projects</NavLink>\n                </Grid>\n                <Grid item xs={4}>\n                    <NavLink to=\"/about\" activeClassName=\"active\" className=\"anchor-item-link\">About</NavLink>\n                </Grid>\n                <Grid item xs={4}>\n                    <NavLink to=\"/contact\" activeClassName=\"active\" className=\"anchor-item-link\">Contact</NavLink>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default NavigationBar","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect, useState, useRef } from 'react'\nimport './css/index.css';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport MyProvider from './state/MyProvider'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport ScrollToTop from './components/utils/ScrollToTop';\nimport AppWrapper from './components/AppWrapper'\nimport NavigationBar from './components/NavigationBar'\n\nexport default function Application() {\n    console.log(process.env.PUBLIC_URL)\n\n    useEffect(() => {\n        return () => {\n            window.removeEventListener(\"scroll\", () => handleScroll)\n        }\n    }, [])\n\n    const [isSticky, setSticky] = useState(false)\n\n    const stickyRef = useRef(null)\n    const handleScroll = () => {\n        window.pageYOffset > 0 //stickyRef.current.getBoundingClientRect().bottom\n            ? setSticky(true)\n            : setSticky(false)\n    }\n\n    const debounce = (func, wait = 20, immediate=true) => {\n        let timeout \n        return () => {\n            let context = this,\n                args = arguments\n            const later = () => {\n                timeout = null\n                if (!immediate) func.apply(context, args)\n            }\n            const callNow = immediate && !timeout\n            clearTimeout(timeout)\n            timeout = setTimeout(later, wait)\n            if (callNow) func.apply(context, args)\n        }\n    }\n\n    window.addEventListener(\"scroll\", handleScroll)\n\n    return (\n        <MyProvider>\n            <Router basename={process.env.PUBLIC_URL}>\n                <ScrollToTop>\n                    <NavigationBar sticky={isSticky} />\n                    <AppWrapper stickyRef={stickyRef} />\n                </ScrollToTop>\n            </Router>\n        </MyProvider>\n    )\n}\n\n\n\n\n"],"sourceRoot":""}